/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "com/woodward/zconfcyclcnt/Component-preload",
	"modules": {
		"com/woodward/zconfcyclcnt/Component.js": "/**\n * Load the Woodward custom library.\n */\nsap.ui.getCore().loadLibrary(\"zlibrary\", \"/sap/bc/ui5_ui5/sap/zlibrary\");\t// ABAP FES\nsap.ui.getCore().loadLibrary(\"zlibrary\", \"/sap/fiori/zlibrary\");\t\t\t// HCP\n\n\nsap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/Device\",\n\t\"com/woodward/zconfcyclcnt/model/models\",\n\t\"com/woodward/zconfcyclcnt/controller/ListSelector\",\n\t\"com/woodward/zconfcyclcnt/controller/ErrorHandler\",\n\t\"zlibrary/ca/BarcodeScanHandler\",\n\t\"zlibrary/wm/WarehouseSelector\"\n], function(UIComponent, Device, models, ListSelector, ErrorHandler, BarcodeScanHandler, WarehouseSelector) {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"com.woodward.zconfcyclcnt.Component\", {\n\n\t\tmetadata: {\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\t\t/**\n\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n\t\t * In this method, the FLP and device models are set and the router is initialized.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tinit: function() {\n\t\t\t// Set the device model.\n\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\t\t\t// Set the FLP model.\n\t\t\tthis.setModel(models.createFLPModel(), \"FLP\");\n\t\t\t// Set the app State model.\n\t\t\tthis.setModel(models.createStateModel(this), \"appState\");\n\n\t\t\t// Bind the User Info object.\n\t\t\tvar fnGetUser = jQuery.sap.getObject(\"sap.ushell.Container.getUser\");\n\t\t\tif (fnGetUser) {\n\t\t\t\tthis._oUserInfo = fnGetUser();\n\t\t\t}\n\n\t\t\t// Bind the List Selector and OData Error Handle convinience APIs.\n\t\t\tthis.oListSelector = new ListSelector();\n\t\t\tthis.oErrorHandler = new ErrorHandler(this);\n\n\t\t\t// Call the base component's init function and create the App view.\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// Install the Barcode handler from the Woodward custom library.\n\t\t\tthis.oBarcodeScanHandler = new BarcodeScanHandler(this, \"FioriNoInput\");\n\n\t\t\t// Install the Warehouse Selector from the Woodward custom library.\n\t\t\tthis.oWarehouseSelector = new WarehouseSelector(function(mWhse) {\n\n\t\t\t\t// Update the app state model.\n\t\t\t\tvar oAppStateModel = this.getModel(\"appState\");\n\t\t\t\toAppStateModel.setProperty(\"/WarehouseNumber\", mWhse.WarehouseNumber);\n\t\t\t\toAppStateModel.setProperty(\"/WarehouseText\", mWhse.WarehouseText);\n\t\t\t\toAppStateModel.setProperty(\"/hasCameraScanner\", this.oBarcodeScanHandler.hasCameraScanner());\n\n\t\t\t\t// Start the router.\n\t\t\t\tthis.getRouter().initialize();\n\t\t\t}.bind(this), this);\n\t\t},\n\n\t\t/**\n\t\t * The component is destroyed by UI5 automatically.\n\t\t * In this method, the ListSelector and ErrorHandler are destroyed.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tdestroy: function() {\n\t\t\t// Resest the Datawedge scan profile back to the default profile.\n\t\t\tif (this.oBarcodeScanHandler.hasHardwareScanner()) {\n\t\t\t\tthis.oBarcodeScanHandler.setScanProfile(this.oBarcodeScanHandler.sDefaultProfile);\n\t\t\t}\n\n\t\t\t// Destroy all of the previously constructed components.\n\t\t\tthis.oListSelector.destroy();\n\t\t\tthis.oErrorHandler.destroy();\n\t\t\tthis.oBarcodeScanHandler.destroy();\n\t\t\tthis.oWarehouseSelector.destroy();\n\n\t\t\t// call the base component's destroy function\n\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\n\t\t},\n\n\t\t/**\n\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n\t\t * design mode class should be set, which influences the size appearance of some controls.\n\t\t * @public\n\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n\t\t */\n\t\tgetContentDensityClass: function() {\n\t\t\tif (this._sContentDensityClass === undefined) {\n\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\n\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\n\t\t\t\t\tthis._sContentDensityClass = \"\";\n\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\n\t\t\t\t} else {\n\t\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._sContentDensityClass;\n\t\t}\n\n\t});\n\n});",
		"com/woodward/zconfcyclcnt/controller/ErrorHandler.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/m/MessageBox\"\n], function(UI5Object, MessageBox) {\n\t\"use strict\";\n\n\treturn UI5Object.extend(\"com.woodward.zconfcyclcnt.controller.ErrorHandler\", {\n\n\t\t/**\n\t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n\t\t * @class\n\t\t * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n\t\t * @public\n\t\t * @alias com.woodward.zconfcyclcnt.controller.ErrorHandler\n\t\t */\n\t\tconstructor: function(oComponent) {\n\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle();\n\t\t\tthis._oComponent = oComponent;\n\t\t\tthis._oModel = oComponent.getModel();\n\t\t\tthis._bMessageOpen = false;\n\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\n\n\t\t\tthis._oModel.attachMetadataFailed(function(oEvent) {\n\t\t\t\tvar oParams = oEvent.getParameters();\n\t\t\t\tthis._showServiceError(oParams.response);\n\t\t\t}, this);\n\n\t\t\tthis._oModel.attachRequestFailed(function(oEvent) {\n\t\t\t\tvar oParams = oEvent.getParameters();\n\t\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\n\t\t\t\t// We already cover this case with a notFound target so we skip it here.\n\t\t\t\t// A request that cannot be sent to the server is a technical error that we have to handle though\n\t\t\t\tif (oParams.response.statusCode !== \"404\" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(\n\t\t\t\t\t\t\"Cannot POST\") === 0)) {\n\t\t\t\t\tthis._showServiceError(oParams.response);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\n\t\t * Only the first error message will be display.\n\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showServiceError: function(sDetails) {\n\t\t\tif (this._bMessageOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._bMessageOpen = true;\n\t\t\tMessageBox.error(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"serviceErrorMessageBox\",\n\t\t\t\t\tdetails: sDetails,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.CLOSE],\n\t\t\t\t\tonClose: function() {\n\t\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t}.bind(this)\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t});\n\n});",
		"com/woodward/zconfcyclcnt/controller/Master.controller.js": "/*global history */\nsap.ui.define([\n\t\"com/woodward/zconfcyclcnt/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/core/routing/History\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/GroupHeaderListItem\",\n\t\"sap/ui/Device\",\n\t\"com/woodward/zconfcyclcnt/model/formatter\",\n\t\"com/woodward/zconfcyclcnt/model/grouper\",\n\t\"com/woodward/zconfcyclcnt/model/GroupSortState\"\n], function(BaseController, JSONModel, History, Filter, FilterOperator, Sorter, GroupHeaderListItem, Device, formatter, grouper, GroupSortState) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"com.woodward.zconfcyclcnt.controller.Master\", {\n\n\t\tformatter: formatter,\n\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Called when the master list controller is instantiated. It sets up the event handling for the master/detail communication and other lifecycle tasks.\n\t\t * @public\n\t\t */\n\t\tonInit: function() {\n\t\t\tthis._oComponent = this.getOwnerComponent();\n\t\t\tthis._oODataModel = this._oComponent.getModel();\n\t\t\tthis._oList = this.byId(\"masterList\");\n\t\t\tthis._sWarehouseNumber = this._oComponent.getModel(\"appState\").getProperty(\"/WarehouseNumber\");\n\n\t\t\t// Control state model\n\t\t\tvar oViewModel = this._createViewModel(),\n\t\t\t\t// Put down master list's original value for busy indicator delay,\n\t\t\t\t// so it can be restored later on. Busy handling on the master list is\n\t\t\t\t// taken care of by the master list itself.\n\t\t\t\tiOriginalBusyDelay = this._oList.getBusyIndicatorDelay();\n\n\t\t\tthis._oGroupSortState = new GroupSortState(\n\t\t\t\toViewModel,\n\t\t\t\tthis.getResourceBundle(),\n\t\t\t\tgrouper.groupStorageType(),\n\t\t\t\tgrouper.groupCountDate(),\n\t\t\t\tgrouper.groupNameOfCounter()\n\t\t\t);\n\n\t\t\t// keeps the filter and search state\n\t\t\tthis._oListFilterState = {\n\t\t\t\taFilter: [],\n\t\t\t\taSearch: []\n\t\t\t};\n\t\t\tthis.setModel(oViewModel, \"masterView\");\n\n\t\t\t// Make sure, busy indication is showing immediately so there is no\n\t\t\t// break after the busy indication for loading the view's meta data is\n\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\n\t\t\tthis._oList.attachEventOnce(\"updateFinished\", function() {\n\t\t\t\t// Restore original busy indicator delay for the list\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t});\n\n\t\t\t// Register the Transfer Order search field for scanner input.\n\t\t\tthis._oComponent.oBarcodeScanHandler.registerScanListener({\n\t\t\t\tid: \"MasterList\",\n\t\t\t\tcontroller: this,\n\t\t\t\tonScan: this.onBarcodeScan.bind(this)\n\t\t\t});\n\n\t\t\tthis.getView().addEventDelegate({\n\t\t\t\tonBeforeFirstShow: function() {\n\t\t\t\t\tthis._oComponent.oListSelector.setBoundMasterList(this._oList);\n\t\t\t\t}.bind(this)\n\t\t\t});\n\n\t\t\tthis.getRouter().getRoute(\"master\").attachPatternMatched(this._onMasterMatched, this);\n\t\t\tthis.getRouter().attachBypassed(this.onBypassed, this);\n\t\t},\n\n\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * After list data is available, this handler method updates the\n\t\t * master list counter and hides the pull to refresh control, if\n\t\t * necessary.\n\t\t * @param {sap.ui.base.Event} oEvent the update finished event\n\t\t * @public\n\t\t */\n\t\tonUpdateFinished: function(oEvent) {\n\t\t\t// update the master list object counter after new data is loaded\n\t\t\tthis._updateListItemCount(oEvent.getParameter(\"total\"));\n\t\t\t// hide pull to refresh if necessary\n\t\t\tthis.byId(\"pullToRefresh\").hide();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for Change Warehouse event.\n\t\t * @public\n\t\t */\n\t\tonChangeWarehouse: function() {\n\t\t\tthis._oComponent.oWarehouseSelector.onChangeWarehouse(function(mWhse) {\n\t\t\t\t// Update the app state model.\n\t\t\t\tthis._oComponent.getModel(\"appState\").setProperty(\"/WarehouseNumber\", mWhse.WarehouseNumber);\n\t\t\t\tthis._oComponent.getModel(\"appState\").setProperty(\"/WarehouseText\", mWhse.WarehouseText);\n\n\t\t\t\t// Change the Master list's Warehouse filter.\n\t\t\t\tthis.sWarehouseNumber = mWhse.WarehouseNumber;\n\t\t\t\tvar oBinding = this.byId(\"masterList\").getBinding(\"items\"),\n\t\t\t\t\taFilters = [];\n\t\t\t\taFilters.push(new Filter(\"WarehouseNumber\", FilterOperator.EQ, mWhse.WarehouseNumber));\n\t\t\t\toBinding.filter(aFilters);\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * Event handler for \"Top-of-Page\" event.  Moves the list to the top.\n\t\t * @param {sap.ui.base.Event} oEvent the Go-To-Top button press event\n\t\t * @public\n\t\t */\n\t\tonGoToTop: function() {\n\t\t\tvar oItem = this._oList.getItems()[0];\n\t\t\tif (oItem) {\n\t\t\t\toItem.focus();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the master search field. Applies current\n\t\t * filter value and triggers a new search. If the search field's\n\t\t * 'refresh' button has been pressed, no new search is triggered\n\t\t * and the list binding is refresh instead.\n\t\t * @param {sap.ui.base.Event} oEvent the search event\n\t\t * @public\n\t\t */\n\t\tonSearch: function(oEvent) {\n\t\t\tif (oEvent.getParameters().refreshButtonPressed) {\n\t\t\t\t// Search field's 'refresh' button has been pressed.\n\t\t\t\t// This is visible if you select any master list item.\n\t\t\t\t// In this case no new search is triggered, we only\n\t\t\t\t// refresh the list binding.\n\t\t\t\tthis.onRefresh();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar sQuery = oEvent.getParameter(\"query\");\n\n\t\t\tif (sQuery) {\n\t\t\t\tthis._oListFilterState.aSearch = [new Filter([\n\t\t\t\t\tnew Filter(\"InventoryDocNumber\", FilterOperator.Contains, sQuery),\n\t\t\t\t\tnew Filter(\"StorageType\", FilterOperator.Contains, sQuery)\n\t\t\t\t], false)];\n\t\t\t} else {\n\t\t\t\tthis._oListFilterState.aSearch = [];\n\t\t\t}\n\t\t\tthis._applyFilterSearch();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for refresh event. Keeps filter, sort\n\t\t * and group settings and refreshes the list binding.\n\t\t * @public\n\t\t */\n\t\tonRefresh: function() {\n\t\t\t// Reset the filter.\n\t\t\tthis._oListFilterState.aSearch = [];\n\t\t\tthis._applyFilterSearch();\n\n\t\t\t// Reset the grouping.\n\t\t\tthis._oList.getBinding(\"items\").sort([\n\t\t\t\tnew Sorter(\"InventoryDocNumber\", false)\n\t\t\t]);\n\n\t\t\t// Clear the \"Search\" field.\n\t\t\tthis.getView().byId(\"masterListSearchField\").setValue();\n\n\t\t\t// Reload the OData entity for TansferOrderHeader\n\t\t\tthis._loadMasterList();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the sorter selection.\n\t\t * @param {sap.ui.base.Event} oEvent the select event\n\t\t * @public\n\t\t */\n\t\tonSort: function(oEvent) {\n\t\t\tvar sKey = oEvent.getSource().getSelectedItem().getKey(),\n\t\t\t\taSorters = this._oGroupSortState.sort(sKey);\n\n\t\t\tthis._applyGroupSort(aSorters);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the grouper selection.\n\t\t * @param {sap.ui.base.Event} oEvent the search field event\n\t\t * @public\n\t\t */\n\t\tonGroup: function(oEvent) {\n\t\t\tvar sKey = oEvent.getSource().getSelectedItem().getKey(),\n\t\t\t\taSorters = this._oGroupSortState.group(sKey);\n\n\t\t\tthis._applyGroupSort(aSorters);\n\t\t},\n\n\t\t/**\n\t\t * Activate the camera for barcode scanning.\n\t\t * @param {sap.ui.base.Event} oEvent the Camera Scanner button event object\n\t\t * @public\n\t\t */\n\t\tonCameraScannerBtn: function() {\n\t\t\tthis._oComponent.oBarcodeScanHandler.onCameraScanner();\n\t\t},\n\n\t\t/**\n\t\t * If a hardware scan event is picked up (only when Cordova is running - DataWedge plugin),\n\t\t * This function will be called with the details of the scan.\n\t\t * @param {string} sScanValue value of scanned bar code.\n\t\t * @public\n\t\t */\n\t\tonBarcodeScan: function(sScanValue) {\n\t\t\tvar oSearch = this.getView().byId(\"masterListSearchField\");\n\t\t\toSearch.setValue(sScanValue).fireSearch({\n\t\t\t\trefreshButtonPressed: false,\n\t\t\t\tquery: sScanValue,\n\t\t\t\tclearButtonPressed: false,\n\t\t\t\tfromScan: true\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the filter button to open the ViewSettingsDialog.\n\t\t * which is used to add or remove filters to the master list. This\n\t\t * handler method is also called when the filter bar is pressed,\n\t\t * which is added to the beginning of the master list when a filter is applied.\n\t\t * @public\n\t\t */\n\t\tonOpenViewSettings: function() {\n\t\t\tif (!this._oViewSettingsDialog) {\n\t\t\t\tthis._oViewSettingsDialog = sap.ui.xmlfragment(\"com.woodward.zconfcyclcnt.view.ViewSettingsDialog\", this);\n\t\t\t\tthis.getView().addDependent(this._oViewSettingsDialog);\n\t\t\t\t// forward compact/cozy style into Dialog\n\t\t\t\tthis._oViewSettingsDialog.addStyleClass(this._oComponent.getContentDensityClass());\n\t\t\t}\n\t\t\tthis._oViewSettingsDialog.open();\n\t\t},\n\n\t\t/**\n\t\t * Event handler called when ViewSettingsDialog has been confirmed, i.e.\n\t\t * has been closed with 'OK'. In the case, the currently chosen filters\n\t\t * are applied to the master list, which can also mean that the currently\n\t\t * applied filters are removed from the master list, in case the filter\n\t\t * settings are removed in the ViewSettingsDialog.\n\t\t * @param {sap.ui.base.Event} oEvent the confirm event\n\t\t * @public\n\t\t */\n\t\tonConfirmViewSettingsDialog: function(oEvent) {\n\t\t\tvar aFilterItems = oEvent.getParameters().filterItems,\n\t\t\t\taFilters = [],\n\t\t\t\taCaptions = [];\n\n\t\t\t// update filter state:\n\t\t\t// combine the filter array and the filter string\n\t\t\taFilterItems.forEach(function(oItem) {\n\t\t\t\taFilters.push(new Filter(\"StorageType\", FilterOperator.EQ, oItem.getKey()));\n\t\t\t\taCaptions.push(oItem.getText());\n\t\t\t});\n\n\t\t\tthis._oListFilterState.aFilter = aFilters;\n\t\t\tthis._updateFilterBar(aCaptions.join(\", \"));\n\t\t\tthis._applyFilterSearch();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the list selection event\n\t\t * @param {sap.ui.base.Event} oEvent the list selectionChange event\n\t\t * @public\n\t\t */\n\t\tonSelectionChange: function(oEvent) {\n\t\t\t// get the list item, either from the listItem parameter or from the event's source itself (will depend on the device-dependent mode).\n\t\t\tthis._showDetail(oEvent.getParameter(\"listItem\") || oEvent.getSource());\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the bypassed event, which is fired when no routing pattern matched.\n\t\t * If there was an object selected in the master list, that selection is removed.\n\t\t * @public\n\t\t */\n\t\tonBypassed: function() {\n\t\t\tthis._oList.removeSelections(true);\n\t\t},\n\n\n\n\t\t/* =========================================================== */\n\t\t/* begin: helper methods                                       */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Used to create GroupHeaders with non-capitalized caption.\n\t\t * These headers are inserted into the master list to\n\t\t * group the master list's items.\n\t\t * @param {Object} oGroup group whose text is to be displayed\n\t\t * @public\n\t\t * @returns {sap.m.GroupHeaderListItem} group header with non-capitalized caption.\n\t\t */\n\t\tcreateGroupHeader: function(oGroup) {\n\t\t\treturn new GroupHeaderListItem({\n\t\t\t\ttitle: oGroup.text,\n\t\t\t\tupperCase: false\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Event handler for navigating back.\n\t\t * It there is a history entry or an previous app-to-app navigation we go one step back in the browser history\n\t\t * If not, it will navigate to the shell home\n\t\t * @public\n\t\t */\n\t\tonNavBack: function() {\n\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash(),\n\t\t\t\toCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\n\t\t\tif (sPreviousHash !== undefined || !oCrossAppNavigator.isInitialNavigation()) {\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\t\t\toCrossAppNavigator.toExternal({\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tshellHash: \"#Shell-home\"\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\n\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\n\t\t_createViewModel: function() {\n\t\t\treturn new JSONModel({\n\t\t\t\tisFilterBarVisible: false,\n\t\t\t\tfilterBarLabel: \"\",\n\t\t\t\tdelay: 0,\n\t\t\t\ttitle: this.getResourceBundle().getText(\"masterTitleCount\", [0]),\n\t\t\t\tnoDataText: this.getResourceBundle().getText(\"masterListNoDataText\"),\n\t\t\t\tsortBy: \"InventoryDocNumber\",\n\t\t\t\tgroupBy: \"None\",\n\t\t\t\tInventoryDocHeaderSet: []\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * If the master route was hit (empty hash) we have to set\n\t\t * the hash to to the first item in the list as soon as the\n\t\t * listLoading is done and the first item in the list is known\n\t\t * @private\n\t\t */\n\t\t_onMasterMatched: function() {\n\t\n\t\t\t// Set the Barcode Scanner to send input to the Master List (search field).\n\t\t\tthis._oComponent.oBarcodeScanHandler.setScanId(\"MasterList\");\n\n\t\t\t// Load the Master List's data once the OData service's is ready.\n\t\t\tif (this._sWarehouseNumber) {\n\t\t\t\tthis._oODataModel.metadataLoaded().then(function(oEvent) {\n\t\t\t\t\tthis._loadMasterList();\n\t\t\t\t}.bind(this));\n\t\t\t} else {\n\t\t\t\t// Let the Master List view navigation complete, then go get the Warehouse.\n\t\t\t\tjQuery.sap.delayedCall(500, this, function() {\n\t\t\t\t\tthis.onChangeWarehouse();\n\t\t\t\t}.bind(this));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Load the Master List items from the OData model.\n\t\t * @private\n\t\t */\n\t\t_loadMasterList: function() {\n\t\t\tvar aFilters = [];\n\n\t\t\tthis._oList.removeSelections();\n\n\t\t\tif (this._sWarehouseNumber) {\n\t\t\t\taFilters.push(new Filter(\"WarehouseNumber\", sap.ui.model.FilterOperator.EQ, this._sWarehouseNumber));\n\t\t\t\tif (!Device.system.phone) {\n\t\t\t\t\tthis.getRouter().getTargets().display(\"notSelectedDetail\");\n\t\t\t\t}\n\t\t\t\tthis._oList.setBusy(true);\n\t\t\t\tthis._oODataModel.read(\"/InventoryDocHeaderSet\",{\n\t\t\t\t\tfilters: aFilters,\n\t\t\t\t\tsuccess: function(oData, oResponse) {\n\t\t\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/InventoryDocHeaderSet\", oData.results);\n\t\t\t\t\t\tthis.byId(\"pullToRefresh\").hide();\n\t\t\t\t\t\tthis._oList.getBinding(\"items\").refresh();\n\t\t\t\t\t\tthis.onGoToTop();\n\t\t\t\t\t\t// this._updateViewTexts(oData.results.length);\n\t\t\t\t\t\tthis._oList.setBusy(false);\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\terror: function(oResponse) {\n\t\t\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/InventoryDocHeaderSet\", []);\n\t\t\t\t\t\tthis.byId(\"pullToRefresh\").hide();\n\t\t\t\t\t\tthis._oList.getBinding(\"items\").refresh();\n\t\t\t\t\t\t// this._updateViewTexts(0);\n\t\t\t\t\t\tthis._oList.setBusy(false);\n\t\t\t\t\t}.bind(this)\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Shows the selected item on the detail page\n\t\t * On phones a additional history entry is created\n\t\t * @param {sap.m.ObjectListItem} oItem selected Item\n\t\t * @private\n\t\t */\n\t\t_showDetail: function(oItem) {\n\t\t\tvar bReplace = !Device.system.phone,\n\t\t\t\tsPath = oItem.getBindingContextPath(),\n\t\t\t\toData = this.getModel(\"masterView\").getProperty(sPath);\n\t\t\tthis.getRouter().navTo(\"object\", {\n\t\t\t\twhseNbr: oData.WarehouseNumber,\n\t\t\t\tdocNbr: oData.InventoryDocNumber\n\t\t\t}, bReplace);\n\t\t},\n\n\t\t/**\n\t\t * Sets the item count on the master list header\n\t\t * @param {integer} iTotalItems the total number of items in the list\n\t\t * @private\n\t\t */\n\t\t_updateListItemCount: function(iTotalItems) {\n\t\t\tvar sTitle;\n\t\t\t// only update the counter if the length is final\n\t\t\tif (this._oList.getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tsTitle = this.getResourceBundle().getText(\"masterTitleCount\", [iTotalItems]);\n\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/title\", sTitle);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method to apply both filter and search state together on the list binding\n\t\t * @private\n\t\t */\n\t\t_applyFilterSearch: function() {\n\t\t\tvar aFilters = this._oListFilterState.aSearch.concat(this._oListFilterState.aFilter),\n\t\t\t\toViewModel = this.getModel(\"masterView\");\n\t\t\tthis._oList.getBinding(\"items\").filter(aFilters, \"Application\");\n\t\t\t// changes the noDataText of the list in case there are no filter results\n\t\t\tif (aFilters.length !== 0) {\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataWithFilterOrSearchText\"));\n\t\t\t} else if (this._oListFilterState.aSearch.length > 0) {\n\t\t\t\t// only reset the no data text to default when no new search was triggered\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataText\"));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method to apply both group and sort state together on the list binding\n\t\t * @param {sap.ui.model.Sorter[]} aSorters an array of sorters\n\t\t * @private\n\t\t */\n\t\t_applyGroupSort: function(aSorters) {\n\t\t\tthis._oList.getBinding(\"items\").sort(aSorters, \"Application\");\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method that sets the filter bar visibility property and the label's caption to be shown\n\t\t * @param {string} sFilterBarText the selected filter value\n\t\t * @private\n\t\t */\n\t\t_updateFilterBar: function(sFilterBarText) {\n\t\t\tvar oViewModel = this.getModel(\"masterView\");\n\t\t\toViewModel.setProperty(\"/isFilterBarVisible\", (this._oListFilterState.aFilter.length > 0));\n\t\t\toViewModel.setProperty(\"/filterBarLabel\", this.getResourceBundle().getText(\"masterFilterBarText\", [sFilterBarText]));\n\t\t}\n\n\t});\n\n});",
		"com/woodward/zconfcyclcnt/controller/ListSelector.js": "sap.ui.define([\n\t\t\"sap/ui/base/Object\"\n\t], function (BaseObject) {\n\t\t\"use strict\";\n\n\t\treturn BaseObject.extend(\"com.woodward.zconfcyclcnt.model.ListSelector\", {\n\n\t\t\t/**\n\t\t\t * Provides a convenience API for selecting list items. All the functions will wait until the initial load of the a List passed to the instance by the setBoundMasterList\n\t\t\t * function.\n\t\t\t * @class\n\t\t\t * @public\n\t\t\t * @alias com.woodward.zconfcyclcnt.model.ListSelector\n\t\t\t */\n\n\t\t\tconstructor : function () {\n\t\t\t\tthis._oWhenListHasBeenSet = new Promise(function (fnResolveListHasBeenSet) {\n\t\t\t\t\tthis._fnResolveListHasBeenSet = fnResolveListHasBeenSet;\n\t\t\t\t}.bind(this));\n\t\t\t\t// This promise needs to be created in the constructor, since it is allowed to\n\t\t\t\t// invoke selectItem functions before calling setBoundMasterList\n\t\t\t\tthis.oWhenListLoadingIsDone = new Promise(function (fnResolve, fnReject) {\n\t\t\t\t\t// Used to wait until the setBound masterList function is invoked\n\t\t\t\t\tthis._oWhenListHasBeenSet\n\t\t\t\t\t\t.then(function (oList) {\n\t\t\t\t\t\t\toList.getBinding(\"items\").attachEventOnce(\"dataReceived\",\n\t\t\t\t\t\t\t\tfunction (oData) {\n\t\t\t\t\t\t\t\t\tif (!oData.getParameter(\"data\")) {\n\t\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\n\t\t\t\t\t\t\t\t\t\t\terror : true\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar oFirstListItem = oList.getItems()[0];\n\t\t\t\t\t\t\t\t\tif (oFirstListItem) {\n\t\t\t\t\t\t\t\t\t\t// Have to make sure that first list Item is selected\n\t\t\t\t\t\t\t\t\t\t// and a select event is triggered. Like that, the corresponding\n\t\t\t\t\t\t\t\t\t\t// detail page is loaded automatically\n\t\t\t\t\t\t\t\t\t\tfnResolve({\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\n\t\t\t\t\t\t\t\t\t\t\tfirstListitem : oFirstListItem\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// No items in the list\n\t\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\n\t\t\t\t\t\t\t\t\t\t\terror : false\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t}.bind(this));\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * A bound list should be passed in here. Should be done, before the list has received its initial data from the server.\n\t\t\t * May only be invoked once per ListSelector instance.\n\t\t\t * @param {sap.m.List} oList The list all the select functions will be invoked on.\n\t\t\t * @public\n\t\t\t */\n\t\t\tsetBoundMasterList : function (oList) {\n\t\t\t\tthis._oList = oList;\n\t\t\t\tthis._fnResolveListHasBeenSet(oList);\n\t\t\t},\n\n\n\t\t\t/**\n\t\t\t * Tries to select and scroll to a list item with a matching binding context. If there are no items matching the binding context or the ListMode is none,\n\t\t\t * no selection/scrolling will happen\n\t\t\t * @param {string} sBindingPath the binding path matching the binding path of a list item\n\t\t\t * @public\n\t\t\t */\n\t\t\tselectAListItem : function (sBindingPath) {\n\n\t\t\t\tthis.oWhenListLoadingIsDone.then(\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar oList = this._oList,\n\t\t\t\t\t\t\toSelectedItem;\n\n\t\t\t\t\t\tif (oList.getMode() === \"None\") {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toSelectedItem = oList.getSelectedItem();\n\n\t\t\t\t\t\t// skip update if the current selection is already matching the object path\n\t\t\t\t\t\tif (oSelectedItem && oSelectedItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toList.getItems().some(function (oItem) {\n\t\t\t\t\t\t\tif (oItem.getBindingContext() && oItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\t\t\toList.setSelectedItem(oItem);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tjQuery.sap.log.warning(\"Could not select the list item with the path\" + sBindingPath + \" because the list encountered an error or had no items\");\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t},\n\n\n\t\t\t/* =========================================================== */\n\t\t\t/* Convenience Functions for List Selection Change Event       */\n\t\t\t/* =========================================================== */\n\n\t\t\t/**\n\t\t\t * Attaches a listener and listener function to the ListSelector's bound master list. By using\n\t\t\t * a promise, the listener is added, even if the list is not available when 'attachListSelectionChange'\n\t\t\t * is called.\n\t\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t\t * @param {function} oListener the listener object\n\t\t\t * @return {com.woodward.zconfcyclcnt.model.ListSelector} the list selector object for method chaining\n\t\t\t * @public\n\t\t\t */\n\t\t\tattachListSelectionChange : function (fnFunction, oListener) {\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\n\t\t\t\t\tthis._oList.attachSelectionChange(fnFunction, oListener);\n\t\t\t\t}.bind(this));\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Detaches a listener and listener function from the ListSelector's bound master list. By using\n\t\t\t * a promise, the listener is removed, even if the list is not available when 'detachListSelectionChange'\n\t\t\t * is called.\n\t\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t\t * @param {function} oListener the listener object\n\t\t\t * @return {com.woodward.zconfcyclcnt.model.ListSelector} the list selector object for method chaining\n\t\t\t * @public\n\t\t\t */\n\t\t\tdetachListSelectionChange : function (fnFunction, oListener) {\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\n\t\t\t\t\tthis._oList.detachSelectionChange(fnFunction, oListener);\n\t\t\t\t}.bind(this));\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Removes all selections from master list.\n\t\t\t * Does not trigger 'selectionChange' event on master list, though.\n\t\t\t * @public\n\t\t\t */\n\t\t\tclearMasterListSelection : function () {\n\t\t\t\t//use promise to make sure that 'this._oList' is available\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\n\t\t\t\t\tthis._oList.removeSelections(true);\n\t\t\t\t}.bind(this));\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"com/woodward/zconfcyclcnt/controller/BaseController.js": "/*global history */\nsap.ui.define([\n\t\t\"sap/ui/core/mvc/Controller\",\n\t\t\"sap/ui/core/routing/History\"\n\t], function (Controller, History) {\n\t\t\"use strict\";\n\n\t\treturn Controller.extend(\"com.woodward.zconfcyclcnt.controller.BaseController\", {\n\t\t\t/**\n\t\t\t * Convenience method for accessing the router in every controller of the application.\n\t\t\t * @public\n\t\t\t * @returns {sap.ui.core.routing.Router} the router for this component\n\t\t\t */\n\t\t\tgetRouter : function () {\n\t\t\t\treturn this.getOwnerComponent().getRouter();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for getting the view model by name in every controller of the application.\n\t\t\t * @public\n\t\t\t * @param {string} sName the model name\n\t\t\t * @returns {sap.ui.model.Model} the model instance\n\t\t\t */\n\t\t\tgetModel : function (sName) {\n\t\t\t\treturn this.getView().getModel(sName);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for setting the view model in every controller of the application.\n\t\t\t * @public\n\t\t\t * @param {sap.ui.model.Model} oModel the model instance\n\t\t\t * @param {string} sName the model name\n\t\t\t * @returns {sap.ui.mvc.View} the view instance\n\t\t\t */\n\t\t\tsetModel : function (oModel, sName) {\n\t\t\t\treturn this.getView().setModel(oModel, sName);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for getting the resource bundle.\n\t\t\t * @public\n\t\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\n\t\t\t */\n\t\t\tgetResourceBundle : function () {\n\t\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Event handler for navigating back.\n\t\t\t * It there is a history entry or an previous app-to-app navigation we go one step back in the browser history\n\t\t\t * If not, it will replace the current entry of the browser history with the master route.\n\t\t\t * @public\n\t\t\t */\n\t\t\tonNavBack : function() {\n\t\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash(),\n\t\t\t\t\toCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\n\t\t\t\t\tif (sPreviousHash !== undefined || !oCrossAppNavigator.isInitialNavigation()) {\n\t\t\t\t\thistory.go(-1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.getRouter().navTo(\"master\", {}, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"com/woodward/zconfcyclcnt/localService/mockserver.js": "sap.ui.define([\n\t\t\"sap/ui/core/util/MockServer\"\n\t], function (MockServer) {\n\t\t\"use strict\";\n\n\t\tvar oMockServer,\n\t\t\t_sAppModulePath = \"com/woodward/zconfcyclcnt/\",\n\t\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\";\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Initializes the mock server.\n\t\t\t * You can configure the delay with the URL parameter \"serverDelay\".\n\t\t\t * The local mock data in this folder is returned instead of the real data for testing.\n\t\t\t * @public\n\t\t\t */\n\n\t\t\tinit : function () {\n\t\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\n\t\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath),\n\t\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"manifest\", \".json\"),\n\t\t\t\t\tsEntity = \"InventoryDocHeaderSet\",\n\t\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\n\t\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500,\n\t\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\n\t\t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.mainService,\n\t\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sAppModulePath + oMainDataSource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\n\t\t\t\t\t// ensure there is a trailing slash\n\t\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\n\n\t\t\t\toMockServer = new MockServer({\n\t\t\t\t\trootUri : sMockServerUrl\n\t\t\t\t});\n\n\t\t\t\t// configure mock server with a delay of 1s\n\t\t\t\tMockServer.config({\n\t\t\t\t\tautoRespond : true,\n\t\t\t\t\tautoRespondAfter : (oUriParameters.get(\"serverDelay\") || 1000)\n\t\t\t\t});\n\n\t\t\t\toMockServer.simulate(sMetadataUrl, {\n\t\t\t\t\tsMockdataBaseUrl : sJsonFilesUrl,\n\t\t\t\t\tbGenerateMissingMockData : true\n\t\t\t\t});\n\n\t\t\t\tvar aRequests = oMockServer.getRequests(),\n\t\t\t\t\tfnResponse = function (iErrCode, sMessage, aRequest) {\n\t\t\t\t\t\taRequest.response = function(oXhr){\n\t\t\t\t\t\t\toXhr.respond(iErrCode, {\"Content-Type\": \"text/plain;charset=utf-8\"}, sMessage);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t// handling the metadata error test\n\t\t\t\tif (oUriParameters.get(\"metadataError\")) {\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\n\t\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Handling request errors\n\t\t\t\tif (sErrorParam) {\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\n\t\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\toMockServer.start();\n\n\t\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @public returns the mockserver of the app, should be used in integration tests\n\t\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\n\t\t\t */\n\t\t\tgetMockServer : function () {\n\t\t\t\treturn oMockServer;\n\t\t\t}\n\t\t};\n\n\t}\n);",
		"com/woodward/zconfcyclcnt/view/Master.view.xml": "<mvc:View controllerName=\"com.woodward.zconfcyclcnt.controller.Master\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns=\"sap.m\"\n\txmlns:semantic=\"sap.m.semantic\" >\n\n\t<semantic:MasterPage id=\"page\"\n\t\ttitle=\"{masterView>/title}\"\n\t\tnavButtonPress=\"onNavBack\"\n\t\tshowNavButton=\"true\" >\n\n\t\t<semantic:customHeaderContent>\n\t\t\t<Button id=\"changeWarehouse\"\n\t\t\t\ticon=\"sap-icon://factory\"\n\t\t\t\ttooltip=\"{i18n>masterChangeWhseTooltip}\"\n\t\t\t\tpress=\"onChangeWarehouse\" />\n\t\t</semantic:customHeaderContent>\n\n\t\t<semantic:subHeader>\n\t\t\t<Bar>\n\t\t\t\t<contentLeft>\n\t\t\t\t\t<Button id=\"topOfListBtn\"\n\t\t\t\t\t\ticon=\"sap-icon://back-to-top\"\n\t\t\t\t\t\ttooltip=\"Jump to the top of the list\"\n\t\t\t\t\t\tpress=\"onGoToTop\" />\n\t\t\t\t</contentLeft>\n\t\t\t\t<contentMiddle>\n\t\t\t\t\t<SearchField id=\"masterListSearchField\"\n\t\t\t\t\t\tshowRefreshButton=\"{= !${device>/support/touch} }\"\n\t\t\t\t\t\tplaceholder=\"{i18n>masterSearchPlaceholder}\"\n\t\t\t\t\t\ttooltip=\"{i18n>masterSearchTooltip}\"\n\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\tsearch=\"onSearch\" />\n\t\t\t\t</contentMiddle>\n\t\t\t\t<contentRight>\n\t\t\t\t\t<Button id=\"cameraScannerBtn\"\n\t\t\t\t\t\tvisible=\"{appState>/hasCameraScanner}\"\n\t\t\t\t\t\ticon=\"sap-icon://bar-code\"\n\t\t\t\t\t\ttooltip=\"{i18n>appActivateBarcodeToolTip}\"\n\t\t\t\t\t\tpress=\"onCameraScannerBtn\" />\n\t\t\t\t</contentRight>\n\t\t\t</Bar>\n\t\t</semantic:subHeader>\n\n\t\t<semantic:content>\n\t\t\t<PullToRefresh id=\"pullToRefresh\"\n\t\t\t\tvisible=\"{device>/support/touch}\"\n\t\t\t\trefresh=\"onRefresh\" />\n\t\t\t<!-- For client side filtering add this to the items attribute:  parameters: {operationMode: 'Client'}}\" -->\n\t\t\t<List id=\"masterList\"\n\t\t\t\titems=\"{\n\t\t\t\t\tpath: 'masterView>/InventoryDocHeaderSet',\n\t\t\t\t\tsorter: {\n\t\t\t\t\t\tpath: 'InventoryDocNumber',\n\t\t\t\t\t\tdescending: false\n\t\t\t\t\t\t},\n\t\t\t\t\tgroupHeaderFactory: '.createGroupHeader'\n\t\t\t\t}\"\n\t\t\t\tbusyIndicatorDelay=\"{masterView>/delay}\"\n\t\t\t\tnoDataText=\"{masterView>/noDataText}\"\n\t\t\t\tmode=\"{= ${device>/system/phone} ? 'None' : 'SingleSelectMaster'}\"\n\t\t\t\tgrowing=\"true\"\n\t\t\t\tgrowingScrollToLoad=\"true\"\n\t\t\t\tupdateFinished=\"onUpdateFinished\"\n\t\t\t\tselectionChange=\"onSelectionChange\" >\n\t\t\t\t<infoToolbar>\n\t\t\t\t\t<Toolbar\n\t\t\t\t\t\tactive=\"true\"\n\t\t\t\t\t\tid=\"filterBar\"\n\t\t\t\t\t\tvisible=\"{masterView>/isFilterBarVisible}\"\n\t\t\t\t\t\tpress=\"onOpenViewSettings\" >\n\t\t\t\t\t\t<Title\n\t\t\t\t\t\t\tid=\"filterBarLabel\"\n\t\t\t\t\t\t\ttext=\"{masterView>/filterBarLabel}\" />\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</infoToolbar>\n\t\t\t\t<items>\n\t\t\t\t\t<ObjectListItem\n\t\t\t\t\t\ttype=\"{= ${device>/system/phone} ? 'Active' : 'Inactive'}\"\n\t\t\t\t\t\tpress=\"onSelectionChange\"\n\t\t\t\t\t\ttitle=\"Inventory Document {masterView>InventoryDocNumber}\" >\n\t\t\t\t\t\t<firstStatus>\n\t\t\t\t\t\t\t<ObjectStatus\n\t\t\t\t\t\t\t\ttitle=\"{i18n>masterListAttrCountDate}\"\n\t\t\t\t\t\t\t\ttext=\"{\n\t\t\t\t\t\t\t\t\tpath: 'masterView>CountDate',\n\t\t\t\t\t\t\t\t\tformatter: '.formatter.formatDateMMDDYY'\n\t\t\t\t\t\t\t\t}\" />\n\t\t\t\t\t\t</firstStatus>\n\t\t\t\t\t\t<secondStatus>\n\t\t\t\t\t\t\t<ObjectStatus\n\t\t\t\t\t\t\t\ttitle=\"{i18n>masterListAttrCounter}\"\n\t\t\t\t\t\t\t\ttext=\"{= ${masterView>NameOfCounter} !== '' ? ${masterView>NameOfCounter} : ${i18n>masterListAttrCounterUnknown}}\" />\n\t\t\t\t\t\t</secondStatus>\n\t\t\t\t\t\t<attributes>\n\t\t\t\t\t\t\t<ObjectAttribute\n\t\t\t\t\t\t\t\ttitle=\"{i18n>masterListAttrStorageType}\"\n\t\t\t\t\t\t\t\ttext=\"{masterView>StorageType}\" />\n\t\t\t\t\t\t\t<ObjectAttribute\n\t\t\t\t\t\t\t\tvisible=\"{= parseInt(${RecountVersion}) > 0 ? true : false}\"\n\t\t\t\t\t\t\t\ttitle=\"{i18n>masterListAttrRecountVersion}\"\n\t\t\t\t\t\t\t\ttext=\"{masterView>RecountVersion}\" />\n\t\t\t\t\t\t</attributes>\n\t\t\t\t\t</ObjectListItem>\n\t\t\t\t</items>\n\t\t\t</List>\n\t\t</semantic:content>\n\n\t\t<semantic:sort>\n\t\t\t<semantic:SortSelect id=\"sort\"\n\t\t\t\tselectedKey=\"{masterView>/sortBy}\"\n\t\t\t\tchange=\"onSort\" >\n\t\t\t\t<core:Item\n\t\t\t\t\tkey=\"InventoryDocNumber\"\n\t\t\t\t\ttext=\"{i18n>masterSort} {i18n>masterSort1}\" />\n\t\t\t\t<core:Item\n\t\t\t\t\tkey=\"StorageType\"\n\t\t\t\t\ttext=\"{i18n>masterSort} {i18n>masterSort2}\" />\n\t\t\t\t<core:Item\n\t\t\t\t\tkey=\"CountDate\"\n\t\t\t\t\ttext=\"{i18n>masterSort} {i18n>masterSort3}\" />\n\t\t\t\t<core:Item\n\t\t\t\t\tkey=\"NameOfCounter\"\n\t\t\t\t\ttext=\"{i18n>masterSort} {i18n>masterSort4}\" />\n\t\t\t</semantic:SortSelect>\n\t\t</semantic:sort>\n\n<!--\n\t\t<semantic:filter>\n\t\t\t<semantic:FilterAction id=\"filter\"\n\t\t\t\tpress=\"onOpenViewSettings\" />\n\t\t</semantic:filter>\n-->\n\n\t\t<semantic:group>\n\t\t\t<semantic:GroupSelect id=\"group\"\n\t\t\t\tselectedKey=\"{masterView>/groupBy}\"\n\t\t\t\tchange=\"onGroup\" >\n\t\t\t\t<core:Item\n\t\t\t\t\tkey=\"None\"\n\t\t\t\t\ttext=\"{i18n>masterGroupNone}\" />\n\t\t\t\t<core:Item\n\t\t\t\t\tkey=\"StorageType\"\n\t\t\t\t\ttext=\"{i18n>masterGroup} {i18n>masterGroup1}\" />\n\t\t\t\t<core:Item\n\t\t\t\t\tkey=\"CountDate\"\n\t\t\t\t\ttext=\"{i18n>masterGroup} {i18n>masterGroup2}\" />\n\t\t\t\t<core:Item\n\t\t\t\t\tkey=\"NameOfCounter\"\n\t\t\t\t\ttext=\"{i18n>masterGroup} {i18n>masterGroup3}\" />\n\t\t\t</semantic:GroupSelect>\n\t\t</semantic:group>\n\n\t</semantic:MasterPage>\n\n</mvc:View>",
		"com/woodward/zconfcyclcnt/view/ViewSettingsDialog.fragment.xml": "<core:FragmentDefinition\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\">\n\n\t<ViewSettingsDialog id=\"viewSettingsDialog\"\n\t\tconfirm=\"onConfirmViewSettingsDialog\"\n\t\tresetFilters=\"onViewSettingsDialogResetFilters\">\n\t\t<filterItems>\n\t\t\t<ViewSettingsFilterItem \n\t\t\t\ttext=\"{i18n>masterFilterName}\"\n\t\t\t\tkey=\"StorageType\"\n\t\t\t\tmultiSelect=\"false\">\n\t\t\t\t<items>\n\t\t\t\t\t<ViewSettingsItem\n\t\t\t\t\t\ttext=\"{i18n>masterFilter1}\"\n\t\t\t\t\t\tkey=\"\" />\n\t\t\t\t\t<ViewSettingsItem\n\t\t\t\t\t\ttext=\"{i18n>masterFilter2}\"\n\t\t\t\t\t\tkey=\"B\" />\n\t\t\t\t\t<ViewSettingsItem\n\t\t\t\t\t\ttext=\"{i18n>masterFilter3}\"\n\t\t\t\t\t\tkey=\"L\" />\n\t\t\t\t</items>\n\t\t\t</ViewSettingsFilterItem>\n\t\t</filterItems>\n\t</ViewSettingsDialog>\n\n</core:FragmentDefinition>",
		"com/woodward/zconfcyclcnt/controller/App.controller.js": "sap.ui.define([\n\t\t\"com/woodward/zconfcyclcnt/controller/BaseController\",\n\t\t\"sap/ui/model/json/JSONModel\"\n\t], function (BaseController, JSONModel) {\n\t\t\"use strict\";\n\n\t\treturn BaseController.extend(\"com.woodward.zconfcyclcnt.controller.App\", {\n\n\t\t\tonInit : function () {\n\t\t\t\tvar oViewModel,\n\t\t\t\t\tfnSetAppNotBusy,\n\t\t\t\t\toListSelector = this.getOwnerComponent().oListSelector,\n\t\t\t\t\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\n\n\t\t\t\toViewModel = new JSONModel({\n\t\t\t\t\tbusy : true,\n\t\t\t\t\tdelay : 0\n\t\t\t\t});\n\t\t\t\tthis.setModel(oViewModel, \"appView\");\n\n\t\t\t\tfnSetAppNotBusy = function() {\n\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t\t};\n\n\t\t\t\tthis.getOwnerComponent().getModel().metadataLoaded()\n\t\t\t\t\t\t.then(fnSetAppNotBusy);\n\n\t\t\t\t// Makes sure that master view is hidden in split app\n\t\t\t\t// after a new list entry has been selected.\n\t\t\t\toListSelector.attachListSelectionChange(function () {\n\t\t\t\t\tthis.byId(\"idAppControl\").hideMaster();\n\t\t\t\t}, this);\n\n\t\t\t\t// apply content density mode to root view\n\t\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"com/woodward/zconfcyclcnt/view/Detail.view.xml": "<mvc:View controllerName=\"com.woodward.zconfcyclcnt.controller.Detail\"\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:semantic=\"sap.m.semantic\"\n\txmlns:footerbar=\"sap.ushell.ui.footerbar\" >\n\n\t<semantic:DetailPage id=\"detailPage\"\n\t\tnavButtonPress=\"onNavBack\"\n\t\tshowNavButton=\"{device>/system/phone}\"\n\t\ttitle=\"{i18n>detailPageTitle} {\n\t\t\tpath: 'InventoryDocNumber',\n\t\t\tformatter: '.formatter.removeLeadingZeros'\n\t\t}\"\n\t\tbusy=\"{detailView>/busy}\"\n\t\tbusyIndicatorDelay=\"{detailView>/delay}\" >\n\n\t\t<semantic:content>\n\t\t\t<Panel id=\"detailPanel\"\n\t\t\t\texpandable=\"true\"\n\t\t\t\theaderText=\"{i18n>detailHeaderTitle} {StorageType}\"\n\t\t\t\texpand=\"onDetailPanelExpand\" >\n\t\t\t\t<ObjectHeader id=\"objectHeader\"\n\t\t\t\t\ttitle=\"{= ${InventoryReference} !== '' ? ${i18n>detailHeaderIntro} + ${InventoryReference} : ''}\" >\n\t\t\t\t\t<attributes>\n\t\t\t\t\t\t<ObjectAttribute\n\t\t\t\t\t\t\ttitle=\"{i18n>detailHeaderAttrCountDate}\"\n\t\t\t\t\t\t\ttext = \"{\n\t\t\t\t\t\t\t\tpath: 'CountDate',\n\t\t\t\t\t\t\t\tformatter: '.formatter.formatDateMMDDYY'\n\t\t\t\t\t\t\t}\" />\n\t\t\t\t\t\t<ObjectAttribute\n\t\t\t\t\t\t\ttitle=\"{i18n>detailHeaderAttrCountedBy}\"\n\t\t\t\t\t\t\ttext = \"{= ${NameOfCounter} !== '' ? ${NameOfCounter} : ${i18n>detailHeaderAttrNoCounter}}\" />\n\t\t\t\t\t\t<ObjectAttribute\n\t\t\t\t\t\t\tvisible=\"{= ${RecountVersion} === '00' ? false : true}\"\n\t\t\t\t\t\t\ttitle=\"{i18n>detailHeaderAttrRecount}\"\n\t\t\t\t\t\t\ttext = \"{RecountVersion}\" />\n\t\t\t\t\t</attributes>\n\t\t\t\t\t<!--\n\t\t\t\t\t<statuses>\n\t\t\t\t\t\t<ObjectStatus\n\t\t\t\t\t\t\ttitle=\"\"\n\t\t\t\t\t\t\ttext=\"{= ${InventoryActive} ? ${i18n>detailHeaderStatActive} : ${i18n>detailHeaderStatInactive} }\"\n\t\t\t\t\t\t\tstate=\"{= ${InventoryActive} ? 'Success' : 'Error' }\"\n\t\t\t\t\t\t\ticon=\"\" />\n\t\t\t\t\t\t<ObjectStatus\n\t\t\t\t\t\t\ttitle=\"\"\n\t\t\t\t\t\t\ttext=\"{= ${QuantInventory} ? ${i18n>detailHeaderStatIsQuant} : ${i18n>detailHeaderStatNotQuant} }\"\n\t\t\t\t\t\t\tstate=\"{= ${QuantInventory} ? 'Success' : 'Warning' }\"\n\t\t\t\t\t\t\ticon=\"\" />\n\t\t\t\t\t</statuses>\n\t\t\t\t\t-->\n\t\t\t\t</ObjectHeader>\n\t\t\t</Panel>\n\n\n\t\t\t<Bar id=\"detailToolBar\"\n\t\t\t\tdesign=\"Header\" >\n\t\t\t\t<contentLeft>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ticon=\"sap-icon://back-to-top\"\n\t\t\t\t\t\ttooltip=\"i18n>detailListTopTooltip\"\n\t\t\t\t\t\tpress=\"onGoToTop\" />\n\t\t\t\t</contentLeft>\n\t\t\t\t<contentMiddle>\n\t\t\t\t\t<SearchField id=\"detailSearchField\"\n\t\t\t\t\t\tshowRefreshButton=\"{= !${device>/support/touch} }\"\n\t\t\t\t\t\tplaceholder=\"{i18n>detailSearchPlaceholder}\"\n\t\t\t\t\t\ttooltip=\"{i18n>detailSearchTooltip}\"\n\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\tsearch=\"onSearch\" />\n\t\t\t\t</contentMiddle>\n\t\t\t\t<contentRight>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvisible=\"{appState>/hasCameraScanner}\"\n\t\t\t\t\t\ticon=\"sap-icon://bar-code\"\n\t\t\t\t\t\ttooltip=\"{i18n>appActivateBarcodeToolTip}\"\n\t\t\t\t\t\tpress=\"onCameraScannerBtn\" />\n\t\t\t\t</contentRight>\n\t\t\t</Bar>\n\n\t\t\t<ScrollContainer id=\"detailListScroller\"\n\t\t\t\tvertical=\"true\" >\n\t\t\t\t<PullToRefresh id=\"detailPullToRefresh\"\n\t\t\t\t\tvisible=\"{device>/support/touch}\"\n\t\t\t\t\trefresh=\"onRefresh\" />\n\n\t\t\t\t<List id=\"detailList\"\n\t\t\t\t\tbusyIndicatorDelay=\"{detailView>/lineItemTableDelay}\"\n\t\t\t\t\tnoDataText=\"{i18n>detailLineItemTableNoDataText}\"\n\t\t\t\t\tmode=\"SingleSelectMaster\"\n\t\t\t\t\tinset=\"false\"\n\t\t\t\t\tincludeItemInSelection=\"false\"\n\t\t\t\t\tupdateFinished=\"onListUpdateFinished\"\n\t\t\t\t\tselectionChange=\"onItemPress\"\n\t\t\t\t\titems=\"{\n\t\t\t\t\t\tpath: 'InventoryDocItemSet',\n\t\t\t\t\t\tparameters: {\n\t\t\t\t\t\t\toperationMode: 'Client'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsorter: [{\n\t\t\t\t\t\t\tpath: 'InventoryDocNumber',\n\t\t\t\t\t\t\tdescending: false,\n\t\t\t\t\t\t\tgroup: false\n\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\tpath: 'InventoryItem',\n\t\t\t\t\t\t\tdescending: false,\n\t\t\t\t\t\t\tgroup: false\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\" >\n\t\t\t\t\t<items>\n\t\t\t\t\t\t<CustomListItem\n\t\t\t\t\t\t\tclass=\"detailListItem\"\n\t\t\t\t\t\t\tbusyIndicatorDelay=\"0\" >\n\t\t\t\t\t\t\t<customData>\n\t\t\t\t\t\t\t\t<core:CustomData\n\t\t\t\t\t\t\t\t\tkey=\"InventoryDocument\"\n\t\t\t\t\t\t\t\t\tvalue=\"\n\t\t\t\t\t\t\t\t\t\t'WarehouseNumber':'{WarehouseNumber}',\n\t\t\t\t\t\t\t\t\t\t'InventoryDocNumber':'{InventoryDocNumber}',\n\t\t\t\t\t\t\t\t\t\t'InventoryItem':'{InventoryItem}',\n\t\t\t\t\t\t\t\t\t\t'QuantNumber':'{QuantNumber}',\n\t\t\t\t\t\t\t\t\t\t'RecountNo':'{RecountNo}'\n\t\t\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t\t\t\twriteToDom=\"true\" />\n\t\t\t\t\t\t\t</customData>\n\t\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t\t<VBox class=\"detailListItemVBox\" >\n\t\t\t\t\t\t\t\t\t<FlexBox\n\t\t\t\t\t\t\t\t\t\tjustifyContent=\"Start\"\n\t\t\t\t\t\t\t\t\t\talignItems=\"Start\"\n\t\t\t\t\t\t\t\t\t\twrap=\"Wrap\" >\n\t\t\t\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t\t\t\t<VBox>\n\t\t\t\t\t\t\t\t\t\t\t\t<layoutData>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FlexItemData alignSelf=\"Start\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FlexItemData growFactor=\"1\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</layoutData>\n\t\t\t\t\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\t\t\t\t\ttext=\"Material: {Material} / Batch: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath: 'Batch',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tformatter: '.formatter.removeLeadingZeros'\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\t\t\t\t\ttext=\"{MaterialDesc}\" />\n\t\t\t\t\t\t\t\t\t\t\t</VBox>\n\t\t\t\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t\t\t\t</FlexBox>\n\t\t\t\t\t\t\t\t\t<FlexBox\n\t\t\t\t\t\t\t\t\t\tjustifyContent=\"SpaceBetween\"\n\t\t\t\t\t\t\t\t\t\talignItems=\"Center\"\n\t\t\t\t\t\t\t\t\t\twrap=\"Wrap\" >\n\t\t\t\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t\t\t\t<VBox>\n\t\t\t\t\t\t\t\t\t\t\t\t<layoutData>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FlexItemData alignSelf=\"Start\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FlexItemData growFactor=\"4\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</layoutData>\n\t\t\t\t\t\t\t\t\t\t\t\t<Label\n\t\t\t\t\t\t\t\t\t\t\t\t\ttext=\"Bin: {StorageBin}\" />\n\t\t\t\t\t\t\t\t\t\t\t</VBox>\n\t\t\t\t\t\t\t\t\t\t\t<HBox>\n\t\t\t\t\t\t\t\t\t\t\t\t<layoutData>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FlexItemData alignSelf=\"End\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FlexItemData growFactor=\"2\" />\n\t\t\t\t\t\t\t\t\t\t\t\t</layoutData>\n\t\t\t\t\t\t\t\t\t\t\t\t<Label\n\t\t\t\t\t\t\t\t\t\t\t\t\tvisible=\"{= ${QuantNumber} === '' ? false : true }\"\n\t\t\t\t\t\t\t\t\t\t\t\t\ttext=\"Quant: {QuantNumber}\" />\n\t\t\t\t\t\t\t\t\t\t\t</HBox>\n\t\t\t\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t\t\t\t</FlexBox>\n\t\t\t\t\t\t\t\t</VBox>\n\t\t\t\t\t\t\t</content>\n\t\t\t\t\t\t</CustomListItem>\n\t\t\t\t\t</items>\n\t\t\t\t</List>\n\t\t\t</ScrollContainer>\n\n\t\t</semantic:content>\n\n\t\t<semantic:sendEmailAction>\n\t\t\t<semantic:SendEmailAction\n\t\t\t\tid=\"shareEmail\"\n\t\t\t\tpress=\"onShareEmailPress\"/>\n\t\t</semantic:sendEmailAction>\n\n\t\t<semantic:shareInJamAction>\n\t\t\t<semantic:ShareInJamAction\n\t\t\t\tid=\"shareInJam\"\n\t\t\t\tvisible=\"{FLP>/isShareInJamActive}\"\n\t\t\t\tpress=\"onShareInJamPress\"/>\n\t\t</semantic:shareInJamAction>\n\n\t\t<semantic:saveAsTileAction>\n\t\t\t<footerbar:AddBookmarkButton\n\t\t\t\tid=\"shareTile\"\n\t\t\t\ttitle=\"{detailView>/saveAsTileTitle}\"/>\n\t\t</semantic:saveAsTileAction>\n\n\t</semantic:DetailPage>\n\n</mvc:View>",
		"com/woodward/zconfcyclcnt/view/DetailNoObjectsAvailable.view.xml": "<mvc:View\n\tcontrollerName=\"com.woodward.zconfcyclcnt.controller.BaseController\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\tid=\"page\"\n\t\ttitle=\"{i18n>notAvailableViewTitle}\"\n\t\ttext=\"{i18n>noObjectsAvailableText}\"\n\t\ticon=\"{sap-icon://product}\"\n\t\tdescription=\"\"\n\t\tshowNavButton=\"{device>/system/phone}\"\n\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"com/woodward/zconfcyclcnt/view/NotFound.view.xml": "<mvc:View\n\tcontrollerName=\"com.woodward.zconfcyclcnt.controller.BaseController\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\tid=\"page\"\n\t\ttitle=\"{i18n>notFoundTitle}\"\n\t\ttext=\"{i18n>notFoundText}\"\n\t\ticon=\"{sap-icon://document}\"\n\t\tdescription=\"\"\n\t\tshowNavButton=\"{device>/system/phone}\"\n\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"com/woodward/zconfcyclcnt/model/GroupSortState.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/ui/model/Sorter\",\n\t\"com/woodward/zconfcyclcnt/model/formatter\"\n], function(BaseObject, Sorter, formatter) {\n\t\"use strict\";\n\n\treturn BaseObject.extend(\"com.woodward.zconfcyclcnt.model.GroupSortState\", {\n\n\t\tformatter: formatter,\n\n\t\t/**\n\t\t * Creates sorters and groupers for the master list.\n\t\t * Since grouping also means sorting, this class modifies the viewmodel.\n\t\t * If a user groups by a field, and there is a corresponding sort option, the option will be chosen.\n\t\t * If a user ungroups, the sorting will be reset to the default sorting.\n\t\t * @class\n\t\t * @public\n\t\t * @alias com.woodward.zconfcyclcnt.model.GroupSortState\n\t\t * @param {sap.ui.model.json.JSONModel} oViewModel the model of the current view\n\t\t * @param {sap.ui.model.ResourceBundle} oResourceBundle the model of the Text Resources\n\t\t * @param {function} fnGroupStorageType the grouping function to be applied for StorageType\n\t\t * @param {function} fnGroupCountDate the grouping function to be applied for CountDate\n\t\t * @param {function} fnGroupNameOfCounter the grouping function to be applied for NameOfCounter\n\t\t */\n\t\tconstructor: function(oViewModel, oResourceBundle, fnGroupStorageType, fnGroupCountDate, fnGroupNameOfCounter) {\n\t\t\tthis._oViewModel = oViewModel;\n\t\t\tthis._oResourceBundle = oResourceBundle;\n\t\t\tthis._fnGroupStorageType = fnGroupStorageType;\n\t\t\tthis._fnGroupCountDate = fnGroupCountDate;\n\t\t\tthis._fnGroupNameOfCounter = fnGroupNameOfCounter;\n\t\t},\n\n\t\t/**\n\t\t * Sorts by the value passed in (sKey).\n\t\t * @param {string} sKey - the key of the field used for grouping\n\t\t * @returns {sap.ui.model.Sorter[]} an array of sorters\n\t\t */\n\t\tsort: function(sKey) {\n\t\t\tvar sGroupedBy = this._oViewModel.getProperty(\"/groupBy\");\n\n\t\t\tif (sGroupedBy !== \"None\") {\n\t\t\t\t// If the list is grouped, remove the grouping since the user wants to sort by something different\n\t\t\t\t// Grouping only works if the list is primary sorted by the grouping - the first sorten contains a grouper function\n\t\t\t\tthis._oViewModel.setProperty(\"/groupBy\", \"None\");\n\t\t\t}\n\n\t\t\treturn [new Sorter(sKey, false)];\n\t\t},\n\n\t\t/**\n\t\t * Groups depending on the value passed in as the \"Key\".\n\t\t * @param {string} sKey - the key of the field used for grouping\n\t\t * @returns {sap.ui.model.Sorter[]} an array of sorters\n\t\t */\n\t\tgroup: function(sKey) {\n\t\t\tvar aSorters = [],\n\t\t\t\tfnGrouper = this[\"_fnGroup\" + sKey];\n\n\t\t\tif (fnGrouper) {\n\t\t\t\tthis._oViewModel.setProperty(\"/sortBy\", sKey);\n\t\t\t\taSorters.push(\n\t\t\t\t\tnew Sorter(sKey, false, fnGrouper.bind(this))\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._oViewModel.setProperty(\"/sortBy\", \"InventoryDocNumber\");\t// default\n\t\t\t}\n\n\t\t\treturn aSorters;\n\t\t}\n\n\t});\n});",
		"com/woodward/zconfcyclcnt/view/fragment/InventoryItemDialog.fragment.xml": "<core:FragmentDefinition\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:f=\"sap.ui.layout.form\" >\n\n\t<Dialog id=\"inventoryItemDialog\"\n\t\tcontentWidth=\"{= ${device>/system/phone} ? '95%' : 'auto' }\"\n\t\ttitle=\"{i18n>detailLineDialogTitle}\"\n\t\tafterOpen=\"onInvItemAfterOpen\"\n\t\tafterClose=\"onInvItemAfterClose\"\n\t\tbusyIndicatorDelay=\"0\"\n\t\tstretch=\"false\" >\n\n\t\t<content>\n\t\t\t<f:SimpleForm id=\"inventoryItemForm\"\n\t\t\t\tmaxContainerCols=\"2\"\n\t\t\t\teditable=\"false\"\n\t\t\t\tlayout=\"ResponsiveGridLayout\"\n\t\t\t\tlabelSpanL=\"5\"\n\t\t\t\tlabelSpanM=\"5\"\n\t\t\t\tlabelSpanS=\"5\"\n\t\t\t\temptySpanL=\"0\"\n\t\t\t\temptySpanM=\"0\"\n\t\t\t\temptySpanS=\"0\"\n\t\t\t\tcolumnsL=\"1\"\n\t\t\t\tcolumnsM=\"1\" >\n\t\t\t\t<f:content>\n\t\t\t\t\t<Label text=\"Material\" />\n\t\t\t\t\t<Text text=\"{Material}\" />\n\t\t\t\t\t<Label />\n\t\t\t\t\t<Text text=\"{MaterialDesc}\" />\n\t\t\t\t\t<Label text=\"Batch\" />\n\t\t\t\t\t<Text text=\"{\n\t\t\t\t\t\t\tpath: 'Batch',\n\t\t\t\t\t\t\tformatter: '.formatter.removeLeadingZeros'\n\t\t\t\t\t\t}\" />\n\t\t\t\t\t<Label text=\"Bin\" />\n\t\t\t\t\t<Text text=\"{StorageBin}\" />\n\t\t\t\t\t<Label text=\"Quant\" />\n\t\t\t\t\t<Text text=\"{QuantNumber}\" />\n\t\t\t\t\t<Label text=\"Count\" />\n\t\t\t\t\t<Input id=\"inventoryItemCount\"\n\t\t\t\t\t\twidth=\"5em\"\n\t\t\t\t\t\ttype=\"Number\"\n\t\t\t\t\t\tvalue=\"{QuantityCounted}\" />\n\t\t\t\t</f:content>\n\t\t\t</f:SimpleForm>\n\t\t</content>\n\n\t\t<buttons>\n\t\t\t<Button type=\"Accept\"\n\t\t\t\ttext=\"{i18n>appUpdate}\"\n\t\t\t\tpress=\"onInvItemUpdate\" />\n\t\t\t<Button type=\"Reject\"\n\t\t\t\ttext=\"{i18n>appCancel}\"\n\t\t\t\tpress=\"onInvItemCancel\" />\n\t\t</buttons>\n\t</Dialog>\n\n</core:FragmentDefinition>",
		"com/woodward/zconfcyclcnt/model/grouper.js": "sap.ui.define([], function() {\n\t\"use strict\";\n\n\t/*\n\t * Use this file to implement your custom grouping functions\n\t * The predefined functions are simple examples and might be replaced by your more complex implementations\n\t * to be called with .bind() and handed over to a sap.ui.model.Sorter\n\t * return value for all your functions is an object with  key-text pairs\n\t * the oContext parameter is not under your control!\n\t */\n\n\treturn {\n\n\t\t/**\n\t\t * Groups the items by Storage Type.\n\t\t * @public\n\t\t * @returns {Function} the grouper function you can pass to your sorter\n\t\t */\n\t\tgroupStorageType: function() {\n\t\t\treturn function(oContext) {\n\t\t\t\tvar sStorageType = oContext.getProperty(\"StorageType\"),\n\t\t\t\tsTitle = this._oResourceBundle.getText(\"masterGroup1\") + \": \";\n\n\t\t\t\treturn {\n\t\t\t\t\tkey: sStorageType,\n\t\t\t\t\ttext: sTitle + sStorageType\n\t\t\t\t};\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Groups the items by proposed Count Date.\n\t\t * @public\n\t\t * @returns {Function} the grouper function you can pass to your sorter\n\t\t */\n\t\tgroupCountDate: function() {\n\t\t\treturn function(oContext) {\n\t\t\t\tvar sCountDate = oContext.getProperty(\"CountDate\"),\n\t\t\t\t\tsTitle = this._oResourceBundle.getText(\"masterGroup2\") + \": \";\n\n\t\t\t\treturn {\n\t\t\t\t\tkey: sCountDate,\n\t\t\t\t\ttext:sTitle + this.formatter.formatDateMMDDYY(sCountDate)\n\t\t\t\t};\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Groups the items by User ID of the proposed Counter.\n\t\t * @public\n\t\t * @returns {Function} the grouper function you can pass to your sorter\n\t\t */\n\t\tgroupNameOfCounter: function() {\n\t\t\treturn function(oContext) {\n\t\t\t\tvar sNameOfCounter = oContext.getProperty(\"NameOfCounter\"),\n\t\t\t\t\tsTitle = this._oResourceBundle.getText(\"masterGroup3\") + \": \";\n\t\t\t\t\n\t\t\t\tif (!sNameOfCounter) {\n\t\t\t\t\tsNameOfCounter = this._oResourceBundle.getText(\"masterListAttrCounterUnknown\");\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tkey: sNameOfCounter,\n\t\t\t\t\ttext: sTitle + sNameOfCounter\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\n\t};\n});",
		"com/woodward/zconfcyclcnt/view/DetailObjectNotFound.view.xml": "<mvc:View\n\tcontrollerName=\"com.woodward.zconfcyclcnt.controller.BaseController\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\tid=\"page\"\n\t\ttitle=\"{i18n>detailTitle}\"\n\t\ttext=\"{i18n>noObjectFoundText}\"\n\t\ticon=\"{sap-icon://product}\"\n\t\tdescription=\"\"\n\t\tshowNavButton=\"{device>/system/phone}\"\n\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"com/woodward/zconfcyclcnt/model/models.js": "sap.ui.define([\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], function(JSONModel, Device) {\n\t\"use strict\";\n\n\treturn {\n\t\tcreateDeviceModel: function() {\n\t\t\tvar oModel = new JSONModel(Device);\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t},\n\n\t\tcreateFLPModel: function() {\n\t\t\tvar fnGetuser = jQuery.sap.getObject(\"sap.ushell.Container.getUser\"),\n\t\t\t\tbIsShareInJamActive = fnGetuser ? fnGetuser().isJamActive() : false,\n\t\t\t\toModel = new JSONModel({\n\t\t\t\t\tisShareInJamActive: bIsShareInJamActive\n\t\t\t\t});\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t},\n\n\t\tcreateStateModel: function(oComponent) {\n\t\t\t// Get the URL (startup) paramters for the configured intent/action.\n\t\t\tvar mParams = oComponent.getComponentData().startupParameters,\n\t\t\t\tsPersona = mParams.hasOwnProperty(\"Persona\") ? mParams.Persona[0] : \"\";\n\n\t\t\tvar oModel = new JSONModel({\n\t\t\t\tPersona: sPersona,\n\t\t\t\tWarehouseNumber: \"\",\n\t\t\t\tWarehouseText: \"\",\n\t\t\t\tDifferenceIndicators: []\n\t\t\t});\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t}\n\t};\n\n});",
		"com/woodward/zconfcyclcnt/view/App.view.xml": "<mvc:View\n\tcontrollerName=\"com.woodward.zconfcyclcnt.controller.App\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\"\n\tbusy=\"{appView>/busy}\"\n\tbusyIndicatorDelay=\"{appView>/delay}\"\n\txmlns=\"sap.m\">\n\t<SplitApp id=\"idAppControl\" />\n</mvc:View>",
		"com/woodward/zconfcyclcnt/controller/Detail.controller.js": "/*global location */\nsap.ui.define([\n\t\"com/woodward/zconfcyclcnt/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/m/MessageBox\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/m/MessageToast\",\n\t\"com/woodward/zconfcyclcnt/model/formatter\"\n], function(BaseController, JSONModel, MessageBox, Filter, FilterOperator, MessageToast, formatter) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"com.woodward.zconfcyclcnt.controller.Detail\", {\n\n\t\tformatter: formatter,\n\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\n\t\tonInit: function() {\n\t\t\t// Bind the component and the default OData model.\n\t\t\tthis._oComponent = this.getOwnerComponent();\n\t\t\tthis._oODataModel = this._oComponent.getModel();\n\t\t\tthis._oResourceBundle = this.getResourceBundle();\n\n\t\t\t// Model used to manipulate control states. The chosen values make sure,\n\t\t\t// detail page is busy indication immediately so there is no break in\n\t\t\t// between the busy indication for loading the view's meta data\n\t\t\tvar oViewModel = new JSONModel({\n\t\t\t\tbusy: false,\n\t\t\t\tdelay: 0\n\t\t\t});\n\t\t\tthis.setModel(oViewModel, \"detailView\");\n\n\t\t\t// Register the Transfer Order and Actual Bin search field for scanner event handlers.\n\t\t\tthis._oComponent.oBarcodeScanHandler.registerScanListener({\n\t\t\t\tid: \"DetailList\",\n\t\t\t\tcontroller: this,\n\t\t\t\tonScan: this.onListBarcodeScan.bind(this)\n\t\t\t});\n\n\t\t\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n\n\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded().then(this._onMetadataLoaded.bind(this));\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Updates the item count within the line item table's header\n\t\t * @param {object} oEvent an event containing the total number of items in the list\n\t\t * @private\n\t\t */\n\t\tonListUpdateFinished: function(oEvent) {\n\t\t\t// Update the scroller are.\n\t\t\t// this.setListScrollerHeight();\n\t\t},\n\n\t\t/**\n\t\t * Called when the \"Expand\" event is fired on the header panel (expand button).\n\t\t * @param {sap.ui.base.Event} oEvent header expand event object.\n\t\t * @public\n\t\t */\n\t\tonDetailPanelExpand: function(oEvent) {\n\t\t\tif (oEvent.getId() !== \"expand\") {\n\t\t\t\tvar oPanel = this.getView().byId(\"detailPanel\");\n\t\t\t\toPanel.setExpanded(!oPanel.getExpanded());\n\t\t\t}\n\n\t\t\t// Wait until the panel open/close animation completes, then recalculate\n\t\t\t// the detail view scroller area.\n\t\t\tjQuery.sap.delayedCall(500, this, function() {\n\t\t\t\tthis.setListScrollerHeight();\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * Event handler for \"Top-of-Page\" event.  Moves the list to the top.\n\t\t * @param {sap.ui.base.Event} oEvent the Go-To-Top button press event\n\t\t * @public\n\t\t */\n\t\tonGoToTop: function() {\n\t\t\tvar oItem = this.getView().byId(\"detailList\").getItems()[0];\n\t\t\tif (oItem) {\n\t\t\t\tvar oScroller = this.getView().byId(\"detailListScroller\");\n\t\t\t\toScroller.scrollToElement(oItem, 300);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for refresh event. Reload the OData entity bound to the list.\n\t\t * @public\n\t\t */\n\t\tonRefresh: function() {\n\t\t\tthis._loadItemList();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the detail list search field. Applies filter\n\t\t * value and triggers a new search. If the search field's \"refresh\"\n\t\t * button was been pressed, all of the list's filters are cleard.\n\t\t * @param {sap.ui.base.Event} oEvent the search event\n\t\t * @public\n\t\t */\n\t\tonSearch: function(oEvent) {\n\t\t\tvar oParams = oEvent.getParameters(),\n\t\t\t\toList = this.getView().byId(\"detailList\"),\n\t\t\t\toFilter = null;\n\n\t\t\tif (!oParams.refreshButtonPressed) {\n\t\t\t\tvar sQuery = oEvent.getParameter(\"query\").toUpperCase();\n\t\t\t\tif (sQuery) {\n\t\t\t\t\toFilter = new Filter([\n\t\t\t\t\t\tnew Filter(\"Material\", FilterOperator.Contains, sQuery),\n\t\t\t\t\t\tnew Filter(\"Batch\", FilterOperator.Contains, sQuery),\n\t\t\t\t\t\tnew Filter(\"DestinationBin\", FilterOperator.Contains, sQuery)\n\t\t\t\t\t], false);\t// -or-\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toList.getBinding(\"items\").filter(oFilter ? [oFilter] : [], \"Application\");\n\n\t\t\tif (oParams.fromScan && !(oParams.refreshButtonPressed || oParams.clearButtonPressed)) {\n\t\t\t\t// Navigate if there is only one row left.\n\t\t\t\tvar aItems = oList.getItems();\n\t\t\t\tif (aItems.length === 1) {\n\t\t\t\t\tthis._confirmInventoryItem(aItems[0]);\n\t\t\t\t} else if (aItems.length === 0) {\n\t\t\t\t\tMessageToast.show(this._oResourceBundle.getText(\"detailLineItemScanNoDataText\", [sQuery]), {\n\t\t\t\t\t\tduration: 3000\t// default\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Clear the search field so it will not stick around. \n\t\t\t\tthis.getView().byId(\"detailSearchField\").setValue().fireSearch({\n\t\t\t\t\trefreshButtonPressed: false,\n\t\t\t\t\tquery: \"\",\n\t\t\t\t\tclearButtonPressed: true\n\t\t\t\t});\n\t\t\t} else if (oParams.refreshButtonPressed) {\n\t\t\t\tthis._loadItemList();\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Detail Material list item press event handler.\n\t\t * @param {object} oEvent Event object from list time selection\n\t\t * @public\n\t\t */\n\t\tonItemPress: function(oEvent) {\n\t\t\tvar oList = oEvent.getSource(),\n\t\t\t\toItem = oEvent.getParameter(\"listItem\");\n\t\t\t// isConfirmed = this._oComponent.getModel().getProperty(oItem.getBindingContextPath()).Confirmation;\n\n\t\t\toList.removeSelections();\n\t\t\t// if (!isConfirmed) {\n\t\t\tthis._confirmInventoryItem(oItem);\n\t\t\t// } else {\n\t\t\t// \tthis._showDetail(oItem);\n\t\t\t// }\n\t\t},\n\n\t\t/**\n\t\t * Event handler called when the Dialog has been rendered. Set the focus to the QTY field.\n\t\t * @pbulic\n\t\t */\n\t\tonInvItemAfterOpen: function() {\n\t\t\tjQuery.sap.delayedCall(300, this, function() {\n\t\t\t\tvar oInput = sap.ui.getCore().byId(\"inventoryItemCount\");\n\t\t\t\toInput.focus();\n\t\t\t\t$(oInput.getFocusDomRef()).select();\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the Inventory Item dialog \"Update\". Call the OData update service.\n\t\t * @param {object} oEvent - Button click event object.\n\t\t * @public\n\t\t */\n\t\tonInvItemUpdate: function(oEvent) {\n\t\t\tvar sItemPath = this._oInvItemDialog.getBindingContext().getPath(),\n\t\t\t\toItem = this._oODataModel.getProperty(sItemPath),\n\t\t\t\tsCounted = sap.ui.getCore().byId(\"inventoryItemCount\").getValue();\n\n\t\t\tthis._oInvItemDialog.setBusy(true);\n\n\t\t\t// Update the Count\n\t\t\toItem.QuantityCounted = sCounted;\n\n\t\t\tvar _fnUdateItem = function(sPath, oEntity) {\n\t\t\t\t// Send the OData \"Update\" request.\n\t\t\t\tthis._oODataModel.update(sPath, oEntity, {\n\t\t\t\t\tsuccess: function(odata, oRespone) {\n\t\t\t\t\t\tthis._oInvItemDialog.close();\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\terror: function(oError) {\n\t\t\t\t\t\tthis._oODataModel.resetChanges();\n\t\t\t\t\t\tthis._oInvItemDialog.setBusy(false);\n\t\t\t\t\t}.bind(this)\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\t// Check for zero quantity.\n\t\t\tif (parseInt(sCounted, 10) === 0) {\n\t\t\t\tMessageBox.confirm(this._oResourceBundle.getText(\"detailLineDialogConfirmZeroMsg\"), {\n\t\t\t\t\ttitle: this._oResourceBundle.getText(\"detailLineDialogConfirmAmtTitle\"),\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tinitialFocus: MessageBox.Action.CANCEL,\n\t\t\t\t\tonClose: function(sAction) {\n\t\t\t\t\t\tif (sAction === MessageBox.Action.CANCEL) {\n\t\t\t\t\t\t\tthis._oODataModel.resetChanges();\n\t\t\t\t\t\t\tthis._oInvItemDialog.setBusy(false);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toItem.ZeroStock = \"X\";\n\t\t\t\t\t\t\t_fnUdateItem(sItemPath, oItem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}.bind(this)\n\t\t\t\t});\n\n\t\t\t} else {\n\t\t\t\t// Check the count for tollerance.\n\t\t\t\tvar sHeaderPath = this.getView().getBindingContext().sPath,\n\t\t\t\t\toHeader = this.getModel().getProperty(sHeaderPath),\n\t\t\t\t\tiExpected = parseInt(oItem.QuantityExpected, 10),\n\t\t\t\t\tiDifference = iExpected - parseInt(sCounted, 10),\n\t\t\t\t\tiTolerance = parseInt(oHeader.DifferenceAllowed, 10) / 100,\t// percent\n\t\t\t\t\tiMinMax = Math.ceil(iExpected * iTolerance);\n\t\t\t\t// if (iMinMax - Math.abs(iDifference) < 0 ) {\n\t\t\t\tif ((iDifference / iExpected) >= iTolerance) {\n\t\t\t\t\t// var sMessage = this._oResourceBundle.getText(\"detailLineDialogConfirmAmtMsg\",[\n\t\t\t\t\t// \tiMinMax.toString(),\n\t\t\t\t\t// \tiExpected.toString(),\n\t\t\t\t\t// \tsCounted,\n\t\t\t\t\t// \tMath.abs(iDifference).toString(),\n\t\t\t\t\t// \tiDifference > 0 ?\tthis._oResourceBundle.getText(\"detailLineDialogConfirmToFew\") :\n\t\t\t\t\t// \t\t\t\t\t\tthis._oResourceBundle.getText(\"detailLineDialogConfirmToMany\")\n\t\t\t\t\t// ]);\n\t\t\t\t\tvar iPercentage = (iDifference / iExpected) * -100,\n\t\t\t\t\t\tsMessage = this._oResourceBundle.getText(\"detailLineDialogConfirmAmtMsg\", [Math.round(iPercentage)]);\n\t\t\t\t\tMessageBox.confirm(sMessage, {\n\t\t\t\t\t\ttitle: this._oResourceBundle.getText(\"detailLineDialogConfirmAmtTitle\"),\n\t\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\t\tinitialFocus: MessageBox.Action.CANCEL,\n\t\t\t\t\t\tonClose: function(sAction) {\n\t\t\t\t\t\t\tif (sAction === MessageBox.Action.CANCEL) {\n\t\t\t\t\t\t\t\tthis._oODataModel.resetChanges();\n\t\t\t\t\t\t\t\tthis._oInvItemDialog.setBusy(false);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t_fnUdateItem(sItemPath, oItem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}.bind(this)\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t_fnUdateItem(sItemPath, oItem);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the \"Cancel\" button press of the Transfer Order item \n\t\t * confirmation dialog for the Difference Indicator.\n\t\t * @param {object} oEvent - Button click event object.\n\t\t * @public\n\t\t */\n\t\tonInvItemCancel: function(oEvent) {\n\t\t\tthis._oODataModel.resetChanges();\n\t\t\tthis._oInvItemDialog.close();\n\t\t},\n\n\t\t/**\n\t\t * After Close event handler for the Transfer Order item confirmation dialog for the Difference Indicator.\n\t\t * @param {object} oEvent - Button click event object.\n\t\t * @public\n\t\t */\n\t\tonInvItemAfterClose: function(oEvent) {\n\t\t\tthis._oInvItemDialog.destroy();\n\n\t\t\t// Set the Barcode Scanner back to sending input to the Detail List search field.\n\t\t\tthis._oComponent.oBarcodeScanHandler.setScanId(\"DetailList\");\n\t\t},\n\n\t\t/**\n\t\t * Activate the camera for List Search field barcode scanning.\n\t\t * @param {sap.ui.base.Event} oEvent the Camera Scanner button event object\n\t\t * @public\n\t\t */\n\t\tonCameraScannerBtn: function() {\n\t\t\tthis._oComponent.oBarcodeScanHandler.onCameraScanner();\n\t\t},\n\n\t\t/**\n\t\t * If a hardware scan event is picked up (only when Cordova is running - DataWedge plugin),\n\t\t * This function will be called with the details of the scan.\n\t\t * @param {string} sScanValue value of scanned bar code.\n\t\t * @public\n\t\t */\n\t\tonListBarcodeScan: function(sScanValue) {\n\t\t\tvar oSearch = this.getView().byId(\"detailSearchField\");\n\t\t\toSearch.setValue(sScanValue).fireSearch({\n\t\t\t\trefreshButtonPressed: false,\n\t\t\t\tquery: sScanValue,\n\t\t\t\tclearButtonPressed: false,\n\t\t\t\tfromScan: true\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Event handler when the share by E-Mail button has been clicked\n\t\t * @public\n\t\t */\n\t\tonShareEmailPress: function() {\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\tsap.m.URLHelper.triggerEmail(\n\t\t\t\tnull,\n\t\t\t\toViewModel.getProperty(\"/shareSendEmailSubject\"),\n\t\t\t\toViewModel.getProperty(\"/shareSendEmailMessage\")\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Event handler when the share in JAM button has been clicked\n\t\t * @public\n\t\t */\n\t\tonShareInJamPress: function() {\n\t\t\tvar oViewModel = this.getModel(\"detailView\"),\n\t\t\t\toShareDialog = sap.ui.getCore().createComponent({\n\t\t\t\t\tname: \"sap.collaboration.components.fiori.sharing.dialog\",\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tobject: {\n\t\t\t\t\t\t\tid: location.href,\n\t\t\t\t\t\t\tshare: oViewModel.getProperty(\"/shareOnJamTitle\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\toShareDialog.open();\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* begin: helper methods                                       */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * For the currently selected Icon Tab, calculate and set scroller height to\n\t\t * take up the remainder of the view below the toolbar.\n\t\t * @param {string} sTabKey the Detail view's tab identifier.\n\t\t * @public\n\t\t */\n\t\tsetListScrollerHeight: function(sTabKey) {\n\t\t\tvar oScroller = this.getView().byId(\"detailListScroller\");\n\t\t\tif (!oScroller) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar oPage = this.getView().byId(\"detailPage\"),\n\t\t\t\toToolBar = this.getView().byId(\"detailToolBar\"),\n\t\t\t\tiPageHeight = oPage.$().outerHeight(true),\n\t\t\t\tiToolBarHeight = oToolBar ? oToolBar.$().outerHeight(true) : 0,\n\t\t\t\tiToolBarFromtop = oToolBar ? oToolBar.$().offset().top : 0,\n\t\t\t\tiFooterHeight = oPage.getAggregation(\"_page\").getAggregation(\"footer\").$().outerHeight(true),\n\t\t\t\tiHeight = iPageHeight - iToolBarFromtop - iToolBarHeight - iFooterHeight;\n\n\t\t\toScroller.setHeight(iHeight.toString() + \"px\");\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Binds the view to the object path and expands the aggregated line items.\n\t\t * @function\n\t\t * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n\t\t * @private\n\t\t */\n\t\t_onObjectMatched: function(oEvent) {\n\t\t\tvar mArguments = oEvent.getParameter(\"arguments\");\n\t\t\tthis.getModel().metadataLoaded().then(function() {\n\t\t\t\tvar sObjectPath = this.getModel().createKey(\"InventoryDocHeaderSet\", {\n\t\t\t\t\tWarehouseNumber: mArguments.whseNbr,\n\t\t\t\t\tInventoryDocNumber: mArguments.docNbr\n\t\t\t\t});\n\t\t\t\tthis._bindView(\"/\" + sObjectPath);\n\t\t\t}.bind(this));\n\n\t\t\t// Set the Barcode Scanner to send input to the Detail List search field.\n\t\t\tthis._oComponent.oBarcodeScanHandler.setScanId(\"DetailList\");\n\n\t\t\t// Colapse the header panel (in case it was previously left open).\n\t\t\tthis.byId(\"detailPanel\").setExpanded(false);\n\t\t},\n\n\t\t/**\n\t\t * Binds the view to the object path. Makes sure that detail view displays\n\t\t * a busy indicator while data for the corresponding element binding is loaded.\n\t\t * @function\n\t\t * @param {string} sObjectPath path to the object to be bound to the view.\n\t\t * @private\n\t\t */\n\t\t_bindView: function(sObjectPath) {\n\t\t\t// Set busy indicator during view binding\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\t// If the view was not bound yet its not busy, only if the binding requests data it is set to busy again\n\t\t\toViewModel.setProperty(\"/busy\", false);\n\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: sObjectPath,\n\t\t\t\tevents: {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_onBindingChange: function() {\n\t\t\tvar oView = this.getView(),\n\t\t\t\toElementBinding = oView.getElementBinding();\n\n\t\t\t// No data for the binding\n\t\t\tif (!oElementBinding.getBoundContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"detailObjectNotFound\");\n\t\t\t\t// if object could not be found, the selection in the master list\n\t\t\t\t// does not make sense anymore.\n\t\t\t\tthis.getOwnerComponent().oListSelector.clearMasterListSelection();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar sPath = oElementBinding.getPath(),\n\t\t\t\toObject = oView.getModel().getObject(sPath),\n\t\t\t\tsObjectId = oObject.InventoryDocNumber,\n\t\t\t\tsObjectName = oObject.InventoryDocNumber,\n\t\t\t\toViewModel = this.getModel(\"detailView\");\n\n\t\t\tthis.getOwnerComponent().oListSelector.selectAListItem(sPath);\n\n\t\t\toViewModel.setProperty(\"/saveAsTileTitle\", this._oResourceBundle.getText(\"shareSaveTileAppTitle\", [sObjectName]));\n\t\t\toViewModel.setProperty(\"/shareOnJamTitle\", sObjectName);\n\t\t\toViewModel.setProperty(\"/shareSendEmailSubject\",\n\t\t\t\tthis._oResourceBundle.getText(\"shareSendEmailObjectSubject\", [sObjectId]));\n\t\t\toViewModel.setProperty(\"/shareSendEmailMessage\",\n\t\t\t\tthis._oResourceBundle.getText(\"shareSendEmailObjectMessage\", [sObjectName, sObjectId, location.href]));\n\t\t},\n\n\t\t_onMetadataLoaded: function() {\n\t\t\t// Store original busy indicator delay for the detail view\n\t\t\tvar iOriginalViewBusyDelay = this.getView().getBusyIndicatorDelay(),\n\t\t\t\toViewModel = this.getModel(\"detailView\"),\n\t\t\t\toLineItemTable = this.byId(\"detailList\"),\n\t\t\t\tiOriginalLineItemTableBusyDelay = oLineItemTable.getBusyIndicatorDelay();\n\n\t\t\t// Make sure busy indicator is displayed immediately when\n\t\t\t// detail view is displayed for the first time\n\t\t\toViewModel.setProperty(\"/delay\", 0);\n\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", 0);\n\n\t\t\toLineItemTable.attachEventOnce(\"updateFinished\", function() {\n\t\t\t\t// Restore original busy indicator delay for line item table\n\t\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", iOriginalLineItemTableBusyDelay);\n\t\t\t});\n\n\t\t\t// Binding the view will set it to not busy - so the view is always busy if it is not bound\n\t\t\toViewModel.setProperty(\"/busy\", true);\n\n\t\t\t// Restore original busy indicator delay for the detail view\n\t\t\toViewModel.setProperty(\"/delay\", iOriginalViewBusyDelay);\n\t\t},\n\n\t\t/**\n\t\t * Load the Inventory Document item list from the OData model.\n\t\t * @private\n\t\t */\n\t\t_loadItemList: function() {\n\t\t\tvar sPath = this.getView().getBindingContext().sPath;\n\t\t\tthis._oComponent.getModel().read(sPath + \"/InventoryDocItemSet\", {\n\t\t\t\tsuccess: function(oData, oResult) {\n\t\t\t\t\tthis.byId(\"detailPullToRefresh\").hide();\n\t\t\t\t}.bind(this),\n\t\t\t\terror: function(oError) {\n\t\t\t\t\tthis.byId(\"detailPullToRefresh\").hide();\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Show the dialog to collect the (confirmed) quantity.  Buttons are to Confirm\n\t\t * or Cancel the action.\n\t\t * @param {object} oItem is the Transfer Order Item bound to the dialog.\n\t\t * @private\n\t\t */\n\t\t_confirmInventoryItem: function(oItem) {\n\t\t\tthis._oInvItemDialog = sap.ui.xmlfragment(\"com.woodward.zconfcyclcnt.view.fragment.InventoryItemDialog\", this);\n\t\t\tthis._oInvItemDialog.setModel(this._oComponent.getModel());\n\t\t\tthis._oInvItemDialog.bindElement(oItem.getBindingContextPath());\n\t\t\tthis._oInvItemDialog.setModel(this._oComponent.getModel(\"i18n\"), \"i18n\");\n\t\t\tthis._oInvItemDialog.setModel(this._oComponent.getModel(\"device\"), \"Device\");\n\t\t\tthis._oInvItemDialog.setModel(this.getModel(\"detailView\"), \"detailView\");\n\t\t\tthis._oInvItemDialog.addStyleClass(this._oComponent.getContentDensityClass());\n\n\t\t\t// Disable the Barcode Scanner so nothing gets sent the Material List (search field).\n\t\t\tthis._oComponent.oBarcodeScanHandler.setScanId(\"\");\n\n\t\t\t// Start the dialog.\n\t\t\tthis._oInvItemDialog.open();\n\t\t}\n\t});\n\n});",
		"com/woodward/zconfcyclcnt/model/formatter.js": "sap.ui.define([], function() {\n\t\"use strict\";\n\n\treturn {\n\n\t\t/**\n\t\t * Removes leading zeros from a string of numbers.\n\t\t * @public\n\t\t * @param {string} sValueIn value to be formatted\n\t\t * @returns {string} formatted value\n\t\t */\n\t\tremoveLeadingZeros: function(sValueIn) {\n\t\t\tvar sValueOut = \"\";\n\t\t\tif (sValueIn) {\n\t\t\t\tsValueOut = sValueIn.replace(/\\b0+/g, '');\n\t\t\t\tif (!sValueOut) {\n\t\t\t\t\tsValueOut = \"0\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sValueOut;\n\t\t},\n\n\t\t/**\n\t\t * Removes leading zeros from a string of numbers.\n\t\t * @public\n\t\t * @param {string} dValue date value to be formatted\n\t\t * @returns {string} formatted sting date\n\t\t */\n\t\tformatDateMMDDYY: function(dValue) {\n\t\t\tvar sDate = \"\";\n\t\t\tif (dValue && Object.prototype.toString.call(dValue) === \"[object Date]\") {\n\t\t\t\tsDate = (dValue.getMonth() + 1) + \"/\" + dValue.getDate() + \"/\" +  dValue.getFullYear();\n\t\t\t}\n\t\t\treturn sDate;\n\t\t}\n\n\t};\n\n});"
	}
});